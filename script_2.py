
# –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ - —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
project_structure = '''# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ n8n-nodes-telegram-reaction

```
n8n-nodes-telegram-reaction/
‚îÇ
‚îú‚îÄ‚îÄ nodes/
‚îÇ   ‚îî‚îÄ‚îÄ TelegramReaction/
‚îÇ       ‚îú‚îÄ‚îÄ TelegramReaction.node.ts      # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–æ–¥—ã
‚îÇ       ‚îú‚îÄ‚îÄ TelegramReaction.node.json    # Codex file (metadata)
‚îÇ       ‚îî‚îÄ‚îÄ telegram.svg                   # –ò–∫–æ–Ω–∫–∞ –Ω–æ–¥—ã
‚îÇ
‚îú‚îÄ‚îÄ package.json                           # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è npm –ø–∞–∫–µ—Ç–∞
‚îú‚îÄ‚îÄ tsconfig.json                          # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TypeScript
‚îú‚îÄ‚îÄ README.md                              # –û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚îú‚îÄ‚îÄ INSTALLATION.md                        # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
‚îú‚îÄ‚îÄ LICENSE                                # –õ–∏—Ü–µ–Ω–∑–∏—è MIT
‚îî‚îÄ‚îÄ .gitignore                             # Git ignore —Ñ–∞–π–ª
```

## –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤

### TelegramReaction.node.ts
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–æ–¥—ã, —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ INodeType
- –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–æ–¥—ã (description)
- –õ–æ–≥–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (execute method)
- –û–±—Ä–∞–±–æ—Ç–∫—É API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram

### package.json
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç:
- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞
- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- –¢–æ—á–∫—É –≤—Ö–æ–¥–∞ –¥–ª—è n8n
- –°–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∫–∏ –∏ –ª–∏–Ω—Ç–∏–Ω–≥–∞

### tsconfig.json
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ TypeScript –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–±–æ—Ä–∫–∏.
'''

# Codex file
codex_json = '''{
  "node": "n8n-nodes-telegram-reaction.telegramReaction",
  "nodeVersion": "1.0",
  "codexVersion": "1.0",
  "categories": ["Communication"],
  "resources": {
    "credentialDocumentation": [
      {
        "url": "https://core.telegram.org/bots#6-botfather"
      }
    ],
    "primaryDocumentation": [
      {
        "url": "https://github.com/yourusername/n8n-nodes-telegram-reaction"
      }
    ],
    "generic": [
      {
        "label": "Telegram Bot API",
        "url": "https://core.telegram.org/bots/api"
      }
    ]
  },
  "alias": ["Telegram", "Reaction", "Emoji"],
  "subcategories": {
    "Communication": ["Social Media"]
  }
}'''

# .gitignore
gitignore = '''# Dependencies
node_modules/
package-lock.json
npm-debug.log*

# Build output
dist/
*.js
*.js.map
*.d.ts

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Logs
logs/
*.log

# Environment
.env
.env.local

# Testing
coverage/
.nyc_output/
'''

# –ü—Ä–∏–º–µ—Ä workflow
example_workflow = '''{
  "name": "Telegram Reaction Example Workflow",
  "nodes": [
    {
      "parameters": {},
      "name": "When clicking Test workflow",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "operation": "setReaction",
        "chatId": "@my_channel",
        "messageId": 123,
        "reactions": {
          "reactionValues": [
            {
              "type": "emoji",
              "emoji": "üëç"
            },
            {
              "type": "emoji",
              "emoji": "‚ù§Ô∏è"
            }
          ]
        },
        "additionalOptions": {
          "isBig": true
        }
      },
      "name": "Telegram Reaction",
      "type": "n8n-nodes-telegram-reaction.telegramReaction",
      "typeVersion": 1,
      "position": [450, 300],
      "credentials": {
        "telegramApi": {
          "id": "1",
          "name": "Telegram Bot"
        }
      }
    }
  ],
  "connections": {
    "When clicking Test workflow": {
      "main": [
        [
          {
            "node": "Telegram Reaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {}
}'''

# Advanced example workflow
advanced_workflow = '''{
  "name": "Auto-React to Telegram Messages",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"]
      },
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "telegram-webhook",
      "credentials": {
        "telegramApi": {
          "id": "1",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.message.text}}",
              "operation": "contains",
              "value2": "—Å–ø–∞—Å–∏–±–æ"
            }
          ]
        }
      },
      "name": "IF Contains Thank You",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "operation": "setReaction",
        "chatId": "={{$json.message.chat.id}}",
        "messageId": "={{$json.message.message_id}}",
        "reactions": {
          "reactionValues": [
            {
              "type": "emoji",
              "emoji": "üôè"
            },
            {
              "type": "emoji",
              "emoji": "‚ù§Ô∏è"
            }
          ]
        }
      },
      "name": "Add Thank You Reaction",
      "type": "n8n-nodes-telegram-reaction.telegramReaction",
      "typeVersion": 1,
      "position": [650, 200],
      "credentials": {
        "telegramApi": {
          "id": "1",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "setReaction",
        "chatId": "={{$json.message.chat.id}}",
        "messageId": "={{$json.message.message_id}}",
        "reactions": {
          "reactionValues": [
            {
              "type": "emoji",
              "emoji": "üëç"
            }
          ]
        }
      },
      "name": "Add Default Reaction",
      "type": "n8n-nodes-telegram-reaction.telegramReaction",
      "typeVersion": 1,
      "position": [650, 400],
      "credentials": {
        "telegramApi": {
          "id": "1",
          "name": "Telegram Bot"
        }
      }
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "IF Contains Thank You",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Contains Thank You": {
      "main": [
        [
          {
            "node": "Add Thank You Reaction",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add Default Reaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {}
}'''

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
files_created = []

with open('PROJECT_STRUCTURE.md', 'w', encoding='utf-8') as f:
    f.write(project_structure)
    files_created.append('PROJECT_STRUCTURE.md')

with open('TelegramReaction.node.json', 'w', encoding='utf-8') as f:
    f.write(codex_json)
    files_created.append('TelegramReaction.node.json')

with open('.gitignore', 'w', encoding='utf-8') as f:
    f.write(gitignore)
    files_created.append('.gitignore')

with open('example-workflow-basic.json', 'w', encoding='utf-8') as f:
    f.write(example_workflow)
    files_created.append('example-workflow-basic.json')

with open('example-workflow-advanced.json', 'w', encoding='utf-8') as f:
    f.write(advanced_workflow)
    files_created.append('example-workflow-advanced.json')

print("‚úì –°–æ–∑–¥–∞–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:")
for file in files_created:
    print(f"  - {file}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏
import csv

all_files = [
    ['–§–∞–π–ª', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¢–∏–ø'],
    ['TelegramReaction.node.ts', '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –Ω–æ–¥—ã —Å –ª–æ–≥–∏–∫–æ–π', 'TypeScript'],
    ['TelegramReaction.node.json', '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–æ–¥—ã (codex)', 'JSON'],
    ['package.json', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è npm –ø–∞–∫–µ—Ç–∞', 'JSON'],
    ['tsconfig.json', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TypeScript', 'JSON'],
    ['README.md', '–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', 'Markdown'],
    ['INSTALLATION.md', '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ', 'Markdown'],
    ['PROJECT_STRUCTURE.md', '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞', 'Markdown'],
    ['.gitignore', 'Git ignore –ø—Ä–∞–≤–∏–ª–∞', 'Text'],
    ['example-workflow-basic.json', '–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä workflow', 'JSON'],
    ['example-workflow-advanced.json', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä workflow', 'JSON'],
]

with open('files-summary.csv', 'w', newline='', encoding='utf-8') as f:
    writer = csv.writer(f)
    writer.writerows(all_files)

print("\n‚úì –°–æ–∑–¥–∞–Ω–∞ —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: files-summary.csv")
print("\nüì¶ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: 11")
print("\nüéØ –ù–æ–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
